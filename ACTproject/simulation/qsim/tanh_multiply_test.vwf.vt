// Copyright (C) 2016  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/23/2017 00:09:01"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          tanh
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module tanh_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [15:0] W;
reg [15:0] X;
// wires                                               
wire [15:0] out1;

// assign statements (if any)                          
tanh i1 (
// port map - connection between master ports and signals/registers   
	.W(W),
	.X(X),
	.out1(out1)
);
initial 
begin 
#1000000 $finish;
end 
// W[ 15 ]
initial
begin
	W[15] = 1'b1;
end 
// W[ 14 ]
initial
begin
	W[14] = 1'b1;
end 
// W[ 13 ]
initial
begin
	W[13] = 1'b1;
end 
// W[ 12 ]
initial
begin
	W[12] = 1'b1;
end 
// W[ 11 ]
initial
begin
	W[11] = 1'b1;
end 
// W[ 10 ]
initial
begin
	W[10] = 1'b1;
end 
// W[ 9 ]
initial
begin
	W[9] = 1'b0;
end 
// W[ 8 ]
initial
begin
	W[8] = 1'b1;
end 
// W[ 7 ]
initial
begin
	W[7] = 1'b1;
end 
// W[ 6 ]
initial
begin
	W[6] = 1'b0;
end 
// W[ 5 ]
initial
begin
	W[5] = 1'b0;
end 
// W[ 4 ]
initial
begin
	W[4] = 1'b0;
end 
// W[ 3 ]
initial
begin
	W[3] = 1'b0;
end 
// W[ 2 ]
initial
begin
	W[2] = 1'b0;
end 
// W[ 1 ]
initial
begin
	W[1] = 1'b0;
end 
// W[ 0 ]
initial
begin
	W[0] = 1'b0;
end 
// X[ 15 ]
initial
begin
	X[15] = 1'b0;
end 
// X[ 14 ]
initial
begin
	X[14] = 1'b0;
end 
// X[ 13 ]
initial
begin
	X[13] = 1'b0;
end 
// X[ 12 ]
initial
begin
	X[12] = 1'b0;
end 
// X[ 11 ]
initial
begin
	X[11] = 1'b0;
end 
// X[ 10 ]
initial
begin
	X[10] = 1'b0;
end 
// X[ 9 ]
initial
begin
	X[9] = 1'b0;
end 
// X[ 8 ]
initial
begin
	X[8] = 1'b0;
end 
// X[ 7 ]
initial
begin
	X[7] = 1'b1;
end 
// X[ 6 ]
initial
begin
	X[6] = 1'b0;
end 
// X[ 5 ]
initial
begin
	X[5] = 1'b0;
end 
// X[ 4 ]
initial
begin
	X[4] = 1'b0;
end 
// X[ 3 ]
initial
begin
	X[3] = 1'b0;
end 
// X[ 2 ]
initial
begin
	X[2] = 1'b0;
end 
// X[ 1 ]
initial
begin
	X[1] = 1'b0;
end 
// X[ 0 ]
initial
begin
	X[0] = 1'b0;
end 
endmodule

